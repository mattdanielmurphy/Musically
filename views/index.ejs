<!DOCTYPE html>
<html>
<head>
  <title></title>
  <link rel="stylesheet" type="text/css" href="index.css">
  <script type="text/javascript" src="https://tonejs.github.io/build/Tone.min.js"></script>
  <script type="text/javascript" src="/MidiConvert.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
</head>
<body>
<h1>Testing</h1>
<button id="play-pause">Play</button>
<button class="key-board" id="D#4">h4</button>



<ul class="set">
  <li class="white b key-board" id="F1"></li>
  <li class="black as key-board" id="F#1"></li>
  <li class="white a key-board" id="G1"></li>
  <li class="black gs key-board" id="G#1"></li>
  <li class="white g key-board" id="A1"></li>
  <li class="black fs key-board" id="A#1"></li>
  <li class="white f key-board" id="B1"></li>
  <li class="white e key-board" id="C2"></li>
  <li class="black ds key-board" id="C#2"></li>
  <li class="white d key-board" id="D2">></li>
  <li class="black cs key-board" id="D#2"></li>
  <li class="white c key-board" id="E2"></li>

  <li class="white q key-board" id="F2"></li>
  <li class="black ws key-board" id="F#2"></li>
  <li class="white w key-board" id="G2"></li>
  <li class="black rs key-board" id="G#2"></li>
  <li class="white r key-board" id="A2"></li>
  <li class="black ts key-board" id="A#2"></li>
  <li class="white t key-board" id="B2"></li>
  <li class="white y key-board" id="C3"></li>
  <li class="black us key-board" id="C#3"></li>
  <li class="white u key-board" id="D3"></li>
  <li class="black is key-board" id="D#3"></li>
  <li class="white i key-board" id="E3"></li>

  <li class="white h key-board" id="F3"></li>
  <li class="black js key-board" id="F#3"></li>
  <li class="white j key-board" id="G3"></li>
  <li class="black ks key-board" id="G#3"></li>
  <li class="white k key-board" id="A3"></li>
  <li class="black ls key-board" id="A#3"></li>
  <li class="white l key-board" id="B3"></li>
  <li class="white m key-board" id="C4"></li>
  <li class="black ns key-board" id="C#4"></li>
  <li class="white n key-board" id="D4"></li>
  <li class="black os key-board" id="D#4"></li>
  <li class="white o key-board" id="E4"></li>

  <li class="white p key-board" id="F4"></li>
  <li class="black ss key-board" id="F#4"></li>
  <li class="white s key-board" id="G4"></li>
  <li class="black vs key-board" id="G#4"></li>
  <li class="white v key-board" id="A4"></li>
  <li class="black xs key-board" id="A#4"></li>
  <li class="white x key-board" id="B4"></li>
  <li class="white z key-board" id="C5"></li>
  <li class="black aas key-board" id="C#5"></li>
  <li class="white aa key-board" id="D5"></li>
  <li class="black bbs key-board" id="D#5"></li>
  <li class="white bb key-board" id="E5"></li>
  <li class="white cc key-board" id="F5"></li>
</ul>
<script>
  synth = new Tone.PolySynth(8, Tone.Synth, {
      oscillator: {
          type: "sine3"
      },
      envelope: {
          attack: .03,
          decay: .1,
          sustain: .2,
          release: .6
      }
  }).toMaster()

  var keyState = {
    C4: false,
    "C#4": false,
    D4: false,
    "D#4": false,
    E4: false,
    F4: false,
    "F#4": false,
    G4: false,
    "G4": false,
    A4: false,
    "A#4": false,
    B4: false,
    C5: false
  }

  $('.key-board').mousedown(function(e) {
    synth.triggerAttack(this.id);
  });

  $('.key-board').mouseup(function(e) {
    synth.triggerRelease(this.id);
  });

  $(window).on('keydown', function(e) {
    switch (e.key) {
      case 'a':
        if (!keyState.C4) {
          synth.triggerAttack('C4');
          keyState.C4 = true;
        }
        break;

      case 's':
        if (!keyState.D4) {
          synth.triggerAttack('D4');
          keyState.D4 = true;
        }
        break;

      case 'd':
        if (!keyState.E4) {
          synth.triggerAttack('E4');
          keyState.E4 = true;
        }
        break;

      case 'f':
        if (!keyState.F4) {
          synth.triggerAttack('F4');
          keyState.F4 = true;
        }
        break;

      case 'g':
        if (!keyState.G4) {
          synth.triggerAttack('G4');
          keyState.G4 = true;
        }
        break;

      case 'h':
        if (!keyState.A4) {
          synth.triggerAttack('A4');
          keyState.A4 = true;
        }
        break;

      case 'j':
        if (!keyState.B4) {
          synth.triggerAttack('B4');
          keyState.B4 = true;
        }
        break;

      case 'z':
        if (!keyState.C5) {
          synth.triggerAttack('C5');
          keyState.C5 = true;
        }
        break;

    }
  })

  $(window).on('keyup', function(e) {
    switch (e.key) {
      case 'a':
        synth.triggerRelease('C4');
        keyState.C4 = false;
        break;
      case 's':
        synth.triggerRelease('D4');
        keyState.D4 = false;
        break;

      case 'd':
        synth.triggerRelease('E4');
        keyState.E4 = false;
        break;
      case 'f':
        synth.triggerRelease('F4');
        keyState.F4 = false;
        break;

      case 'g':
        synth.triggerRelease('G4');
        keyState.G4 = false;
        break;
      case 'h':
        synth.triggerRelease('A4');
        keyState.A4 = false;
        break;

      case 'j':
        synth.triggerRelease('B4');
        keyState.B4 = false;
        break;

      case 'z':
        synth.triggerRelease('C5');
        keyState.C5 = false;
        break;

      default:
        break;
    }
  })


  function playNote(time, event) {
      synth.triggerAttackRelease(event.name, event.duration, time, event.velocity)
  }
var playing = false;
var playPauseButton = document.getElementById("play-pause");
playPauseButton.onclick=function(){
  console.log("play midi file")
  MidiConvert.load("/Sherlocked.mid", function(midi) {

    // make sure you set the tempo before you schedule the events
    Tone.Transport.bpm.value = midi.header.bpm
    midi.tracks.forEach(function(track){
    // pass in the note events from one of the tracks as the second argument to Tone.Part
    var midiPart = new Tone.Part(playNote, track.notes).start(0)

    })
    if (playing) {
      Tone.Transport.pause();
      playPauseButton.innerHTML = "Play";
      playing = false;
    } else {
      // Start the music
      Tone.Transport.start();

      playPauseButton.innerHTML = "Pause";
      playing = true;
    }



  })
}
</script>
</body>
</html>